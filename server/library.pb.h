// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: library.proto

#ifndef PROTOBUF_library_2eproto_INCLUDED
#define PROTOBUF_library_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_library_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStudent_BookNumberImpl();
void InitDefaultsStudent_BookNumber();
void InitDefaultsStudentImpl();
void InitDefaultsStudent();
void InitDefaultsLibraryRecordsImpl();
void InitDefaultsLibraryRecords();
inline void InitDefaults() {
  InitDefaultsStudent_BookNumber();
  InitDefaultsStudent();
  InitDefaultsLibraryRecords();
}
}  // namespace protobuf_library_2eproto
namespace tutorial {
class LibraryRecords;
class LibraryRecordsDefaultTypeInternal;
extern LibraryRecordsDefaultTypeInternal _LibraryRecords_default_instance_;
class Student;
class StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class Student_BookNumber;
class Student_BookNumberDefaultTypeInternal;
extern Student_BookNumberDefaultTypeInternal _Student_BookNumber_default_instance_;
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> ::tutorial::LibraryRecords* Arena::Create< ::tutorial::LibraryRecords>(Arena*);
template<> ::tutorial::Student* Arena::Create< ::tutorial::Student>(Arena*);
template<> ::tutorial::Student_BookNumber* Arena::Create< ::tutorial::Student_BookNumber>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tutorial {

enum Student_BookType {
  Student_BookType_NOVEL = 0,
  Student_BookType_FICTION = 1,
  Student_BookType_NON_FICTION = 2,
  Student_BookType_Student_BookType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Student_BookType_Student_BookType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Student_BookType_IsValid(int value);
const Student_BookType Student_BookType_BookType_MIN = Student_BookType_NOVEL;
const Student_BookType Student_BookType_BookType_MAX = Student_BookType_NON_FICTION;
const int Student_BookType_BookType_ARRAYSIZE = Student_BookType_BookType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Student_BookType_descriptor();
inline const ::std::string& Student_BookType_Name(Student_BookType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Student_BookType_descriptor(), value);
}
inline bool Student_BookType_Parse(
    const ::std::string& name, Student_BookType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Student_BookType>(
    Student_BookType_descriptor(), name, value);
}
// ===================================================================

class Student_BookNumber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Student.BookNumber) */ {
 public:
  Student_BookNumber();
  virtual ~Student_BookNumber();

  Student_BookNumber(const Student_BookNumber& from);

  inline Student_BookNumber& operator=(const Student_BookNumber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Student_BookNumber(Student_BookNumber&& from) noexcept
    : Student_BookNumber() {
    *this = ::std::move(from);
  }

  inline Student_BookNumber& operator=(Student_BookNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Student_BookNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Student_BookNumber* internal_default_instance() {
    return reinterpret_cast<const Student_BookNumber*>(
               &_Student_BookNumber_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Student_BookNumber* other);
  friend void swap(Student_BookNumber& a, Student_BookNumber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Student_BookNumber* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Student_BookNumber>(NULL);
  }

  Student_BookNumber* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Student_BookNumber>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Student_BookNumber& from);
  void MergeFrom(const Student_BookNumber& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Student_BookNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string bookname = 3;
  void clear_bookname();
  static const int kBooknameFieldNumber = 3;
  const ::std::string& bookname() const;
  void set_bookname(const ::std::string& value);
  #if LANG_CXX11
  void set_bookname(::std::string&& value);
  #endif
  void set_bookname(const char* value);
  void set_bookname(const char* value, size_t size);
  ::std::string* mutable_bookname();
  ::std::string* release_bookname();
  void set_allocated_bookname(::std::string* bookname);

  // .tutorial.Student.BookType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::tutorial::Student_BookType type() const;
  void set_type(::tutorial::Student_BookType value);

  // @@protoc_insertion_point(class_scope:tutorial.Student.BookNumber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr bookname_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_library_2eproto::TableStruct;
  friend void ::protobuf_library_2eproto::InitDefaultsStudent_BookNumberImpl();
};
// -------------------------------------------------------------------

class Student : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Student) */ {
 public:
  Student();
  virtual ~Student();

  Student(const Student& from);

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(Student&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Student& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Student* other);
  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Student* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Student>(NULL);
  }

  Student* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Student>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Student* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Student_BookNumber BookNumber;

  typedef Student_BookType BookType;
  static const BookType NOVEL =
    Student_BookType_NOVEL;
  static const BookType FICTION =
    Student_BookType_FICTION;
  static const BookType NON_FICTION =
    Student_BookType_NON_FICTION;
  static inline bool BookType_IsValid(int value) {
    return Student_BookType_IsValid(value);
  }
  static const BookType BookType_MIN =
    Student_BookType_BookType_MIN;
  static const BookType BookType_MAX =
    Student_BookType_BookType_MAX;
  static const int BookType_ARRAYSIZE =
    Student_BookType_BookType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BookType_descriptor() {
    return Student_BookType_descriptor();
  }
  static inline const ::std::string& BookType_Name(BookType value) {
    return Student_BookType_Name(value);
  }
  static inline bool BookType_Parse(const ::std::string& name,
      BookType* value) {
    return Student_BookType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .tutorial.Student.BookNumber books = 4;
  int books_size() const;
  void clear_books();
  static const int kBooksFieldNumber = 4;
  ::tutorial::Student_BookNumber* mutable_books(int index);
  ::google::protobuf::RepeatedPtrField< ::tutorial::Student_BookNumber >*
      mutable_books();
  const ::tutorial::Student_BookNumber& books(int index) const;
  ::tutorial::Student_BookNumber* add_books();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::Student_BookNumber >&
      books() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // .google.protobuf.Timestamp last_issue = 5;
  bool has_last_issue() const;
  void clear_last_issue();
  static const int kLastIssueFieldNumber = 5;
  const ::google::protobuf::Timestamp& last_issue() const;
  ::google::protobuf::Timestamp* release_last_issue();
  ::google::protobuf::Timestamp* mutable_last_issue();
  void set_allocated_last_issue(::google::protobuf::Timestamp* last_issue);

  // int32 roll_no = 2;
  void clear_roll_no();
  static const int kRollNoFieldNumber = 2;
  ::google::protobuf::int32 roll_no() const;
  void set_roll_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.Student)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::Student_BookNumber > books_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::Timestamp* last_issue_;
  ::google::protobuf::int32 roll_no_;
  mutable int _cached_size_;
  friend struct ::protobuf_library_2eproto::TableStruct;
  friend void ::protobuf_library_2eproto::InitDefaultsStudentImpl();
};
// -------------------------------------------------------------------

class LibraryRecords : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.LibraryRecords) */ {
 public:
  LibraryRecords();
  virtual ~LibraryRecords();

  LibraryRecords(const LibraryRecords& from);

  inline LibraryRecords& operator=(const LibraryRecords& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LibraryRecords(LibraryRecords&& from) noexcept
    : LibraryRecords() {
    *this = ::std::move(from);
  }

  inline LibraryRecords& operator=(LibraryRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LibraryRecords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LibraryRecords* internal_default_instance() {
    return reinterpret_cast<const LibraryRecords*>(
               &_LibraryRecords_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LibraryRecords* other);
  friend void swap(LibraryRecords& a, LibraryRecords& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LibraryRecords* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LibraryRecords>(NULL);
  }

  LibraryRecords* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LibraryRecords>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LibraryRecords& from);
  void MergeFrom(const LibraryRecords& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LibraryRecords* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tutorial.Student students = 1;
  int students_size() const;
  void clear_students();
  static const int kStudentsFieldNumber = 1;
  ::tutorial::Student* mutable_students(int index);
  ::google::protobuf::RepeatedPtrField< ::tutorial::Student >*
      mutable_students();
  const ::tutorial::Student& students(int index) const;
  ::tutorial::Student* add_students();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::Student >&
      students() const;

  // @@protoc_insertion_point(class_scope:tutorial.LibraryRecords)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::Student > students_;
  mutable int _cached_size_;
  friend struct ::protobuf_library_2eproto::TableStruct;
  friend void ::protobuf_library_2eproto::InitDefaultsLibraryRecordsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Student_BookNumber

// string id = 1;
inline void Student_BookNumber::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Student_BookNumber::id() const {
  // @@protoc_insertion_point(field_get:tutorial.Student.BookNumber.id)
  return id_.GetNoArena();
}
inline void Student_BookNumber::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Student.BookNumber.id)
}
#if LANG_CXX11
inline void Student_BookNumber::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Student.BookNumber.id)
}
#endif
inline void Student_BookNumber::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Student.BookNumber.id)
}
inline void Student_BookNumber::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Student.BookNumber.id)
}
inline ::std::string* Student_BookNumber::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Student.BookNumber.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Student_BookNumber::release_id() {
  // @@protoc_insertion_point(field_release:tutorial.Student.BookNumber.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Student_BookNumber::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Student.BookNumber.id)
}

// .tutorial.Student.BookType type = 2;
inline void Student_BookNumber::clear_type() {
  type_ = 0;
}
inline ::tutorial::Student_BookType Student_BookNumber::type() const {
  // @@protoc_insertion_point(field_get:tutorial.Student.BookNumber.type)
  return static_cast< ::tutorial::Student_BookType >(type_);
}
inline void Student_BookNumber::set_type(::tutorial::Student_BookType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Student.BookNumber.type)
}

// string bookname = 3;
inline void Student_BookNumber::clear_bookname() {
  bookname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Student_BookNumber::bookname() const {
  // @@protoc_insertion_point(field_get:tutorial.Student.BookNumber.bookname)
  return bookname_.GetNoArena();
}
inline void Student_BookNumber::set_bookname(const ::std::string& value) {
  
  bookname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Student.BookNumber.bookname)
}
#if LANG_CXX11
inline void Student_BookNumber::set_bookname(::std::string&& value) {
  
  bookname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Student.BookNumber.bookname)
}
#endif
inline void Student_BookNumber::set_bookname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bookname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Student.BookNumber.bookname)
}
inline void Student_BookNumber::set_bookname(const char* value, size_t size) {
  
  bookname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Student.BookNumber.bookname)
}
inline ::std::string* Student_BookNumber::mutable_bookname() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Student.BookNumber.bookname)
  return bookname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Student_BookNumber::release_bookname() {
  // @@protoc_insertion_point(field_release:tutorial.Student.BookNumber.bookname)
  
  return bookname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Student_BookNumber::set_allocated_bookname(::std::string* bookname) {
  if (bookname != NULL) {
    
  } else {
    
  }
  bookname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bookname);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Student.BookNumber.bookname)
}

// -------------------------------------------------------------------

// Student

// string name = 1;
inline void Student::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Student::name() const {
  // @@protoc_insertion_point(field_get:tutorial.Student.name)
  return name_.GetNoArena();
}
inline void Student::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Student.name)
}
#if LANG_CXX11
inline void Student::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Student.name)
}
#endif
inline void Student::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Student.name)
}
inline void Student::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Student.name)
}
inline ::std::string* Student::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Student.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Student::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.Student.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Student::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Student.name)
}

// int32 roll_no = 2;
inline void Student::clear_roll_no() {
  roll_no_ = 0;
}
inline ::google::protobuf::int32 Student::roll_no() const {
  // @@protoc_insertion_point(field_get:tutorial.Student.roll_no)
  return roll_no_;
}
inline void Student::set_roll_no(::google::protobuf::int32 value) {
  
  roll_no_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Student.roll_no)
}

// string email = 3;
inline void Student::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Student::email() const {
  // @@protoc_insertion_point(field_get:tutorial.Student.email)
  return email_.GetNoArena();
}
inline void Student::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Student.email)
}
#if LANG_CXX11
inline void Student::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Student.email)
}
#endif
inline void Student::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Student.email)
}
inline void Student::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Student.email)
}
inline ::std::string* Student::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Student.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Student::release_email() {
  // @@protoc_insertion_point(field_release:tutorial.Student.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Student::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Student.email)
}

// repeated .tutorial.Student.BookNumber books = 4;
inline int Student::books_size() const {
  return books_.size();
}
inline void Student::clear_books() {
  books_.Clear();
}
inline ::tutorial::Student_BookNumber* Student::mutable_books(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Student.books)
  return books_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::Student_BookNumber >*
Student::mutable_books() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Student.books)
  return &books_;
}
inline const ::tutorial::Student_BookNumber& Student::books(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Student.books)
  return books_.Get(index);
}
inline ::tutorial::Student_BookNumber* Student::add_books() {
  // @@protoc_insertion_point(field_add:tutorial.Student.books)
  return books_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::Student_BookNumber >&
Student::books() const {
  // @@protoc_insertion_point(field_list:tutorial.Student.books)
  return books_;
}

// .google.protobuf.Timestamp last_issue = 5;
inline bool Student::has_last_issue() const {
  return this != internal_default_instance() && last_issue_ != NULL;
}
inline const ::google::protobuf::Timestamp& Student::last_issue() const {
  const ::google::protobuf::Timestamp* p = last_issue_;
  // @@protoc_insertion_point(field_get:tutorial.Student.last_issue)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Student::release_last_issue() {
  // @@protoc_insertion_point(field_release:tutorial.Student.last_issue)
  
  ::google::protobuf::Timestamp* temp = last_issue_;
  last_issue_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Student::mutable_last_issue() {
  
  if (last_issue_ == NULL) {
    last_issue_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Student.last_issue)
  return last_issue_;
}
inline void Student::set_allocated_last_issue(::google::protobuf::Timestamp* last_issue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_issue_);
  }
  if (last_issue) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(last_issue)->GetArena();
    if (message_arena != submessage_arena) {
      last_issue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_issue, submessage_arena);
    }
    
  } else {
    
  }
  last_issue_ = last_issue;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Student.last_issue)
}

// -------------------------------------------------------------------

// LibraryRecords

// repeated .tutorial.Student students = 1;
inline int LibraryRecords::students_size() const {
  return students_.size();
}
inline void LibraryRecords::clear_students() {
  students_.Clear();
}
inline ::tutorial::Student* LibraryRecords::mutable_students(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.LibraryRecords.students)
  return students_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::Student >*
LibraryRecords::mutable_students() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.LibraryRecords.students)
  return &students_;
}
inline const ::tutorial::Student& LibraryRecords::students(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.LibraryRecords.students)
  return students_.Get(index);
}
inline ::tutorial::Student* LibraryRecords::add_students() {
  // @@protoc_insertion_point(field_add:tutorial.LibraryRecords.students)
  return students_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::Student >&
LibraryRecords::students() const {
  // @@protoc_insertion_point(field_list:tutorial.LibraryRecords.students)
  return students_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tutorial::Student_BookType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::Student_BookType>() {
  return ::tutorial::Student_BookType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_library_2eproto_INCLUDED
